{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cody\\\\Documents\\\\GitHub\\\\2205815-six-cities-simple-12\\\\project\\\\src\\\\components\\\\map\\\\map.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef } from 'react';\nimport leaflet from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport useMap from '../../hooks/use-map/use-map';\nimport { URL_MARKER_DEFAULT, URL_MARKER_CURRENT } from '../consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Map(_ref) {\n  _s();\n  let {\n    city,\n    offers,\n    activeOfferId,\n    isPropertyScreenMap\n  } = _ref;\n  const offer = city;\n  const mapRef = useRef(null);\n  const map = useMap({\n    mapRef,\n    offer\n  });\n  const [cityCenter, setCityCenter] = offer.city.name;\n  const defaultCustomIcon = leaflet.icon({\n    iconUrl: URL_MARKER_DEFAULT,\n    iconSize: [40, 40],\n    iconAnchor: [20, 40]\n  });\n  const currentCustomIcon = leaflet.icon({\n    iconUrl: URL_MARKER_CURRENT,\n    iconSize: [40, 40],\n    iconAnchor: [20, 40]\n  });\n\n  /*\n    useEffect(() => {\n      if (map) {\n        offers.forEach((of) => {\n          if (of.id === activeOfferId) {\n            leaflet\n              .marker({\n                lat: of.location.latitude,\n                lng: of.location.longitude,\n              }, {\n                icon: currentCustomIcon,\n              })\n              .addTo(map);\n          } else {\n            leaflet\n              .marker({\n                lat: of.location.latitude,\n                lng: of.location.longitude,\n              }, {\n                icon: defaultCustomIcon,\n              })\n              .addTo(map);\n          }});\n      }\n    }, [map, offers, activeOfferId, currentCustomIcon, defaultCustomIcon]);\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    ref: mapRef,\n    className: isPropertyScreenMap ? 'property__map map' : 'cities__map map'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(Map, \"lEk/5U1MhYanolRDJuvSvPj+dDQ=\", false, function () {\n  return [useMap];\n});\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useRef","leaflet","useMap","URL_MARKER_DEFAULT","URL_MARKER_CURRENT","jsxDEV","_jsxDEV","Map","_ref","_s","city","offers","activeOfferId","isPropertyScreenMap","offer","mapRef","map","cityCenter","setCityCenter","name","defaultCustomIcon","icon","iconUrl","iconSize","iconAnchor","currentCustomIcon","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Cody/Documents/GitHub/2205815-six-cities-simple-12/project/src/components/map/map.tsx"],"sourcesContent":["import React, {useRef, useEffect} from 'react';\nimport leaflet from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport useMap from '../../hooks/use-map/use-map';\nimport { URL_MARKER_DEFAULT, URL_MARKER_CURRENT } from '../consts';\n\nimport { Offer, Offers } from '../../types/offers';\n\ntype MapProps = {\n    offers: Offers;\n    city: Offer;\n    activeOfferId: number;\n    isPropertyScreenMap?: boolean;\n}\n\nfunction Map({city, offers, activeOfferId, isPropertyScreenMap}: MapProps): JSX.Element {\n  const offer = city;\n  const mapRef = useRef(null);\n  const map = useMap({mapRef, offer});\n\n  const [cityCenter, setCityCenter] = offer.city.name;\n\n  \n\n  const defaultCustomIcon = leaflet.icon({\n    iconUrl: URL_MARKER_DEFAULT,\n    iconSize: [40, 40],\n    iconAnchor: [20, 40],\n  });\n\n  const currentCustomIcon = leaflet.icon({\n    iconUrl: URL_MARKER_CURRENT,\n    iconSize: [40, 40],\n    iconAnchor: [20, 40],\n  });\n\n\n/*\n  useEffect(() => {\n    if (map) {\n      offers.forEach((of) => {\n        if (of.id === activeOfferId) {\n          leaflet\n            .marker({\n              lat: of.location.latitude,\n              lng: of.location.longitude,\n            }, {\n              icon: currentCustomIcon,\n            })\n            .addTo(map);\n        } else {\n          leaflet\n            .marker({\n              lat: of.location.latitude,\n              lng: of.location.longitude,\n            }, {\n              icon: defaultCustomIcon,\n            })\n            .addTo(map);\n        }});\n    }\n  }, [map, offers, activeOfferId, currentCustomIcon, defaultCustomIcon]);\n*/\n\n  return (\n    <section\n      ref={mapRef}\n      className={isPropertyScreenMap ?\n        'property__map map'\n        :\n        'cities__map map'}\n    >\n    </section>\n  );\n}\n\nexport default Map;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,MAAM,QAAkB,OAAO;AAC9C,OAAOC,OAAO,MAAM,SAAS;AAC7B,OAAO,0BAA0B;AACjC,OAAOC,MAAM,MAAM,6BAA6B;AAChD,SAASC,kBAAkB,EAAEC,kBAAkB,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAWnE,SAASC,GAAGA,CAAAC,IAAA,EAA4E;EAAAC,EAAA;EAAA,IAA3E;IAACC,IAAI;IAAEC,MAAM;IAAEC,aAAa;IAAEC;EAA6B,CAAC,GAAAL,IAAA;EACvE,MAAMM,KAAK,GAAGJ,IAAI;EAClB,MAAMK,MAAM,GAAGf,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAMgB,GAAG,GAAGd,MAAM,CAAC;IAACa,MAAM;IAAED;EAAK,CAAC,CAAC;EAEnC,MAAM,CAACG,UAAU,EAAEC,aAAa,CAAC,GAAGJ,KAAK,CAACJ,IAAI,CAACS,IAAI;EAInD,MAAMC,iBAAiB,GAAGnB,OAAO,CAACoB,IAAI,CAAC;IACrCC,OAAO,EAAEnB,kBAAkB;IAC3BoB,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;IAClBC,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE;EACrB,CAAC,CAAC;EAEF,MAAMC,iBAAiB,GAAGxB,OAAO,CAACoB,IAAI,CAAC;IACrCC,OAAO,EAAElB,kBAAkB;IAC3BmB,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;IAClBC,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE;EACrB,CAAC,CAAC;;EAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,oBACElB,OAAA;IACEoB,GAAG,EAAEX,MAAO;IACZY,SAAS,EAAEd,mBAAmB,GAC5B,mBAAmB,GAEnB;EAAkB;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEZ;AAEd;AAACtB,EAAA,CA3DQF,GAAG;EAAA,QAGEL,MAAM;AAAA;AAAA8B,EAAA,GAHXzB,GAAG;AA6DZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}